openapi: 3.0.0
info:
  title: Pandora
  description: "## Introduction\n\n API documentation for Pandora - REST API starter kit powered by Laravel, OpenAPI, Sanctum.\n\n- [GitHub](https://github.com/arifszn/pandora)\n- [MIT License](https://github.com/arifszn/pandora/blob/main/LICENSE)"
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
    description: 'Local API server'
paths:
  /api/admin/login:
    post:
      tags:
        - adminAuth
      summary: 'Login an admin'
      description: 'Login an admin.'
      operationId: Admin.AuthController.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInAdminResource'
        '422':
          description: 'Unprocessable entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Invalid credentials.' }
                type: object
  /api/admin/logout:
    post:
      tags:
        - adminAuth
      summary: 'Logout an admin'
      description: 'Logout an admin.'
      operationId: Admin.AuthController.logout
      responses:
        '204':
          description: 'No content'
      security:
        -
          BearerToken: []
  /api/admin/profile:
    get:
      tags:
        - adminProfile
      summary: me
      description: 'Get the authenticated admin.'
      operationId: Admin.ProfileController.me
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResource'
      security:
        -
          BearerToken: []
  /api/signup:
    post:
      tags:
        - auth
      summary: 'Signup a user'
      description: 'Signup a user.'
      operationId: AuthController.signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInUserResource'
        '422':
          description: 'Unprocessable entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/login:
    post:
      tags:
        - auth
      summary: 'Login a user'
      description: 'Login a user.'
      operationId: AuthController.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInUserResource'
        '422':
          description: 'Unprocessable entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Invalid credentials.' }
                type: object
  /api/logout:
    post:
      tags:
        - auth
      summary: 'Logout a user'
      description: 'Logout a user.'
      operationId: AuthController.logout
      responses:
        '204':
          description: 'No content'
      security:
        -
          BearerToken: []
  /api/refresh-token:
    post:
      tags:
        - auth
      summary: 'Issue a new access token'
      description: 'Issue a new access token'
      operationId: AuthController.refreshToken
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResource'
      security:
        -
          BearerToken: []
  /api/category:
    get:
      tags:
        - category
      summary: 'Get a list of category of User (Pagination applied).'
      description: 'Get a list of note category (Pagination applied).'
      operationId: CategoryController.index
      parameters:
        -
          parameter: limit
          name: limit
          in: query
          schema:
            type: integer
            default: 10
        -
          parameter: page
          name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/WrapPagination' }
                  - { properties: { data: { type: array, items: { $ref: '#/components/schemas/CategoryResource' } } }, type: object }
      security:
        -
          BearerToken: []
    post:
      tags:
        - category
      summary: 'Create a new note category.'
      description: 'Create a new note category.'
      operationId: CategoryController.store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
      responses:
        '201':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResource'
        '422':
          description: 'Unprocessable entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        -
          BearerToken: []
  '/api/category/{id}':
    put:
      tags:
        - category
      summary: 'Update a note category.'
      description: 'Update a note category.'
      operationId: CategoryController.update
      parameters:
        -
          parameter: id
          name: id
          in: path
          required: true
          schema:
            type: integer
            default: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResource'
        '404':
          description: 'Not found the category'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'No query results for model [App\Models\Category] 10' }
                type: object
        '403':
          description: 'This action is unauthorized'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'This action is unauthorized.' }
                type: object
      security:
        -
          BearerToken: []
    delete:
      tags:
        - category
      summary: 'Delete a note category.'
      description: 'Delete a note category.'
      operationId: CategoryController.destroy
      parameters:
        -
          parameter: id
          name: id
          in: path
          required: true
          schema:
            type: integer
            default: 1
      responses:
        '204':
          description: 'Delete the category successfully'
        '404':
          description: 'Not found the category'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'No query results for model [App\Models\Category] 10' }
                type: object
        '403':
          description: 'This action is unauthorized'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'This action is unauthorized.' }
                type: object
      security:
        -
          BearerToken: []
  /api/note:
    get:
      tags:
        - note
      summary: 'Get a list of notes of User (Pagination applied)'
      description: 'Get a list of notes of User (Pagination applied)'
      operationId: NoteController.index
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/WrapPagination' }
                  - { properties: { data: { type: array, items: { $ref: '#/components/schemas/NoteResource' } } }, type: object }
      security:
        -
          BearerToken: []
  /api/profile:
    get:
      tags:
        - profile
      summary: me
      description: 'Get the authenticated user.'
      operationId: ProfileController.me
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'
      security:
        -
          BearerToken: []
components:
  schemas:
    WrapPagination:
      properties:
        data:
          type: array
          items: {  }
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 10
        has_next:
          type: boolean
          example: true
        has_prev:
          type: boolean
          example: false
      type: object
    ValidationError:
      properties:
        message:
          type: string
          example: 'The given data was invalid.'
        errors:
          properties:
            'key 1':
              type: array
              items:
                type: string
                example: 'Error message 1'
            'key 2':
              type: array
              items:
                type: string
                example: 'Error message 2'
          type: object
      type: object
    AdminLoginRequest:
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: root@admin.com
        password:
          type: string
          example: '123456'
      type: object
    LoginRequest:
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: '123456'
      type: object
    SignupRequest:
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: '123456'
        password_confirmation:
          type: string
          example: '123456'
      type: object
    CategoryCreateRequest:
      required:
        - user_id
        - name
      properties:
        name:
          type: string
          example: to-do-list
      type: object
    CategoryUpdateRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: to-do-list
      type: object
    AccessTokenResource:
      properties:
        token:
          type: string
          example: 6|JeXDJdhmaQN4Nl3T3DaD9sE20PoPrdUx15W0m2eA
        expires_at:
          type: string
          format: date-time
          example: '2023-08-09T03:22:18.000000Z'
        type:
          type: string
          example: bearer
      type: object
    AdminResource:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Admin
        email:
          type: string
          example: root@admin.com
        avatar_url:
          type: string
          example: 'https://someplace.com/avatar'
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2022-08-27T16:14:46.000000Z'
      type: object
    CategoryResource:
      properties:
        id:
          type: integer
          example: 1
        uuid:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
        name:
          type: string
          example: to-do-list
        created_at:
          type: string
          format: date-time
          example: '2022-08-27T16:14:46.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2022-08-27T16:14:46.000000Z'
      type: object
    LoggedInAdminResource:
      properties:
        admin:
          $ref: '#/components/schemas/AdminResource'
        token:
          $ref: '#/components/schemas/AccessTokenResource'
      type: object
    LoggedInUserResource:
      properties:
        user:
          $ref: '#/components/schemas/UserResource'
        access_token:
          $ref: '#/components/schemas/AccessTokenResource'
        refresh_token:
          $ref: '#/components/schemas/AccessTokenResource'
      type: object
    NoteResource:
      properties:
        id:
          type: integer
          example: 1
        uuid:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
        category:
          type: string|null
          example: to-do-list
        title:
          type: string
          example: 'Hello World'
        created_at:
          type: string
          format: date-time
          example: '2022-08-27T16:14:46.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2022-08-27T16:14:46.000000Z'
      type: object
    UserResource:
      properties:
        id:
          type: integer
          example: 1
        uuid:
          type: string
          example: 99dd5781-fc07-4e41-94fd-e69ece858d73
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          example: john@example.com
        avatar_url:
          type: string
          example: 'https://someplace.com/avatar'
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2022-08-27T16:14:46.000000Z'
      type: object
  securitySchemes:
    BearerToken:
      type: http
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: auth
    description: 'User authentication'
  -
    name: adminAuth
    description: 'Admin authentication'
  -
    name: profile
    description: 'User profile'
  -
    name: adminProfile
    description: 'Admin profile'
